name: Docker Image CI/CD

on:
  workflow_run:
    workflows:
      - Run tests
    types:
      - completed
    branches:
      - main

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: dzailz/whisper-api
          flavor: latest=true
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha
          labels: |
            org.opencontainers.image.source=${{ github.repository_url }}
            org.opencontainers.image.revision=${{ github.sha }}

      - uses: docker/setup-buildx-action@v3

      - uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

  deploy_latest:
    name: Deploy the latest image to the server
    needs: push_to_registry
    runs-on: [self-hosted, linux, x64, whisper]
    steps:
      - name: Pull and Run the latest image
        run: |
          docker pull ${{ vars.IMAGE }}
          docker run -d \
            --env-file ${{ vars.ENV_FILE }} \
            --name ${{ vars.CONTAINER_NAME }} \
            --volume ${{ vars.MODELS_FOLDER }}:/root/.cache/whisper/ \
            -p ${{ vars.OUT_PORT }}:8000 \
            --rm ${{ vars.IMAGE }}

  test_deployed:
    name: Test the deployed image
    needs: deploy_latest
    runs-on: [self-hosted, linux, x64, whisper]
    steps:
      - name: Check if the container is running and available on port ${{ vars.OUT_PORT }}
        run: |
          attempt_counter=0
          max_attempts=10

          until { curl --output /dev/null --silent --get --fail http://127.0.0.1:${{ vars.OUT_PORT }}; } do
              if [ ${attempt_counter} -eq ${max_attempts} ];then
                echo "Max attempts reached"
                exit 1
              fi

              printf '.'
              attempt_counter=$((attempt_counter + 1))
              sleep 1
          done
          if ! docker ps | grep -q whisper-container; then
            echo "Container is not running"
            exit 1
          fi
          if ! curl --output /dev/null --silent --head --fail http://127.0.0.1:${{ vars.OUT_PORT }}; then
            echo "Container is not responding on port ${{ vars.OUT_PORT }}"
            exit 1
          fi
