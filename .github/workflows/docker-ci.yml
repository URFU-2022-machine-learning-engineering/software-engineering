name: Docker Image CI/CD

on:
  workflow_run:
    workflows:
      - Run tests
    types:
      - completed
    branches:
      - main

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: dzailz/whisper-api
          flavor: |
            latest=true
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=ref,event=pr
          custom: |
            [[ ${{ github.ref }} == 'refs/heads/main' ]] && echo "main"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new


  deploy_latest:
    name: Deploy the latest image to the server
    needs: push_to_registry
    runs-on: [self-hosted, linux, x64, whisper]
    steps:
      - name: Pull the latest image
        run: docker pull ${{ vars.IMAGE }}
      - name: Run the container
        run: |
          docker run -d \
          --env-file ${{ vars.ENV_FILE }} \
          --name ${{ vars.CONTAINER_NAME }} \
          --volume ${{ vars.MODELS_FOLDER }}:/root/.cache/whisper/ \
          -p 8000:8000 \
          --rm ${{ vars.IMAGE }}

  test_deployed:
    name: Test the deployed image
    needs: deploy_latest
    runs-on: [self-hosted, linux, x64, whisper]
    steps:
      - name: Check if the container is running
        run: docker ps | grep ${{ vars.CONTAINER_NAME }}
      - name: Check if container is available on port 8000
        run: |
          attempt_counter=0
          max_attempts=10

          until { curl --output /dev/null --silent --get --fail http://127.0.0.1:8000; } do
              if [ ${attempt_counter} -eq ${max_attempts} ];then
                echo "Max attempts reached"
                exit 1
              fi

              printf '.'
              attempt_counter=$((attempt_counter + 1))
              sleep 1
          done
