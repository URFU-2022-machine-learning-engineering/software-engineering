name: Docker Image CI/CD

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: dzailz/whisper-api

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            dzailz/whisper-api:latest
          labels: ${{ steps.meta.outputs.labels }}


  deploy_latest:
    name: Deploy the latest image to the server
    runs-on: self-hosted
    steps:
      - name: Stop the container
        run: docker stop ${{ vars.CONTAINER_NAME }}
      - name: Remove the container
        run: docker rm ${{ vars.CONTAINER_NAME }}
      - name: Pull the latest image
        run: docker pull ${{ vars.IMAGE }}
      - name: Run the container
        run: >
          docker run -d \
          --env-file /var/whisper/.env \
          --name ${{ vars.CONTAINER_NAME }} \
          --volume ${{ vars.MODELS_FOLDER }}:/root/.cache/whisper/ \
          --volume /var/whisper/logs/:/var/log/whisper.log -p 8000:8000 \
          --rm ${{ vars.IMAGE }}

  test_deployed:
    name: Test the deployed image
    runs-on: self-hosted
    steps:
      - name: Check if the container is running
        run: docker ps | grep ${{ vars.CONTAINER_NAME }}
      - name: Check if container is available on port 8000
        run: >
          attempt_counter=0
          max_attempts=10

          until { curl --output /dev/null --silent --get --fail http://127.0.0.1:8000; } do
              if [ ${attempt_counter} -eq ${max_attempts} ];then
                echo "Max attempts reached"
                exit 1
              fi

              printf '.'
              attempt_counter=$((attempt_counter + 1))
              sleep 1
          done
